

# let w = [[0.;-1.;-1.;1.];[1.;0.;1.;-1.];[-1.;-1.;0.;1.];[1.;-1.;1.;0.]];;
val w : float list list =
  [[0.; -1.; -1.; 1.]; [1.; 0.; 1.; -1.]; [-1.; -1.; 0.; 1.];
   [1.; -1.; 1.; 0.]]
# let os1 = [2.;-3.;2.;-1.];;
val os1 : float list = [2.; -3.; 2.; -1.]
# let os2 = [-2.;3.;-2.;1.];;
val os2 : float list = [-2.; 3.; -2.; 1.]
# nextState(os1,w);;
- : float list = [2.; 1.; 2.; 1.]
# nextState(os2,w);;
- : float list = [-2.; -1.; -2.; -1.]

# let o1 = [2.0;-1.0];;
val o1 : float list = [2.; -1.]
# let w1 = [[0.0;1.0];[1.0;0.0]];;
val w1 : float list list = [[0.; 1.]; [1.; 0.]]
# updateN(o1,w1,1);;
- : float list = [-1.; 1.]
# updateN(o1,w1,2);;
- : float list = [1.; -1.]

# findsEquilibrium(os1,w,10);;
- : bool = false
# findsEquilibrium(o1,w1,10);;
- : bool = false

# let w2 = [[0.;1.];[1.;0.]];;
val w2 : float list list = [[0.; 1.]; [1.; 0.]]
# let o2 = [2.;-1.];;
val o2 : float list = [2.; -1.]
# let o3 = [2.;3.];;
val o3 : float list = [2.; 3.]
# energy(o2,w2);;
- : float = 2.
# energy(o3,w2);;
- : float = -6.

# let a = [2.;1.;-2.];;
val a : float list = [2.; 1.; -2.]
# let b = [1.;2.;-1.];;
val b : float list = [1.; 2.; -1.]
# hopTrainAstate(a);;
- : float list list = [[0.; 2.; -4.]; [2.; 0.; -2.]; [-4.; -2.; 0.]]
# hopTrainAstate(b);;
- : float list list = [[0.; 2.; -1.]; [2.; 0.; -2.]; [-1.; -2.; 0.]]

# let aStates = [[0.;-1.;1.];[-1.;1.;0.]];;
val aStates : float list list = [[0.; -1.; 1.]; [-1.; 1.; 0.]]
# let bStates = [[1.;2.];[-2.;1.]];;
val bStates : float list list = [[1.; 2.]; [-2.; 1.]]
# hopTrain(aStates);;
- : float list list = [[0.; -1.; 0.]; [-1.; 0.; -1.]; [0.; -1.; 0.]]
# hopTrain(bStates);;
- : float list list = [[0.; 0.]; [0.; 0.]]
